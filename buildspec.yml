version: 0.2

cache:
  paths:
    - 'frontend/node_modules/**/*'

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo Installing dependencies...
      - npm install -g @openapitools/openapi-generator-cli
      - cd frontend
      - npm install
      - npm install --save-dev axios-mock-adapter jest ts-jest @types/jest identity-obj-proxy
      - cd ..

  pre_build:
    commands:
      - echo Writing jest.config.ts...
      - |
        cat <<EOF > frontend/jest.config.ts
        import type { Config } from 'jest';

        const config: Config = {
          preset: 'ts-jest',
          testEnvironment: 'jsdom',
          moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
          testMatch: ['**/__tests__/**/*.test.ts?(x)'],
          transform: {
            '^.+\\\\.(ts|tsx)$': 'ts-jest',
          },
          transformIgnorePatterns: [
            'node_modules/(?!(axios)/)',
          ],
          collectCoverage: true,
          coverageDirectory: 'coverage',
          moduleNameMapper: {
            '\\\\.\\(css|less|scss)$': 'identity-obj-proxy',
            '\\\\.\\(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js',
          },
        };

        export default config;
        EOF
      - echo Writing fileMock.js...
      - mkdir -p frontend/__mocks__
      - echo "module.exports = 'test-file-stub';" > frontend/__mocks__/fileMock.js

      - echo Export OpenAPI spec from API Gateway...
      - aws apigateway get-export --rest-api-id $API_ID --stage-name $STAGE --export-type oas30 --accepts application/json openapi.json
      - |
        if [ ! -f openapi.json ]; then
          echo "Error: Failed to export openapi.json"
          exit 1
        fi
      - echo Generating TypeScript Axios client from OpenAPI spec...
      - openapi-generator-cli generate -i openapi.json -g typescript-axios -o frontend/src/api
      - echo Generating Jest test files from OpenAPI spec...
      - node generate-tests.js

  build:
    commands:
      - echo Running frontend tests with coverage...
      - cd frontend
      - npm run test -- --coverage
      - echo Build frontend app...
      - npm run build
      - cd ..

artifacts:
  files:
    - frontend/build/**/*
    - frontend/coverage/**/*